#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
Generates a static Python module with a full State -> Districts mapping
from the Integrated Government Online Directory (IGOD) website.

Output file: app/services/india_districts.py

Run:
  .\.venv\Scripts\python scripts\generate_india_districts.py

This script uses only the standard library (requests is already in requirements).
"""
import re
import sys
import time
import json
from pathlib import Path
from typing import Dict, List, Tuple

import requests

BASE_URL = "https://igod.gov.in"
STATES_INDEX = f"{BASE_URL}/sg/district/states"
STATE_PAGE_TMPL = f"{BASE_URL}/sg/{{code}}/E042/organizations"

HEADERS = {
    "User-Agent": "KaamConnect Districts Crawler/1.0 (+https://example.local)"
}

ROOT = Path(__file__).resolve().parents[1]
TARGET = ROOT / "app" / "services" / "india_districts.py"

STATE_LINK_RE = re.compile(r"href=\"/sg/([A-Z]{1,3})/E042/organizations\"[^>]*>([^<]+)</a>")
ANCHOR_RE = re.compile(r"<a [^>]*href=\"([^\"]+)\"[^>]*>([^<]+)</a>", re.IGNORECASE)

SKIP_TEXTS = {"Sub Districts", "Blocks"}


def fetch(url: str) -> str:
    resp = requests.get(url, headers=HEADERS, timeout=20)
    resp.raise_for_status()
    return resp.text


def parse_states(html: str) -> List[Tuple[str, str]]:
    # Returns list of (state_name, code)
    found = STATE_LINK_RE.findall(html)
    # Deduplicate by code, keep first occurrence
    seen = set()
    out: List[Tuple[str, str]] = []
    for code, name in found:
        if code not in seen:
            seen.add(code)
            out.append((name.strip(), code))
    return out


def parse_districts(html: str) -> List[str]:
    districts: List[str] = []
    for href, text in ANCHOR_RE.findall(html):
        text = text.strip()
        if not text:
            continue
        if text in SKIP_TEXTS:
            continue
        # Filter out IGOD internal nav anchors that are not district websites
        if href.startswith(BASE_URL + "/district/"):
            continue
        # Many district links point to external NIC/State domains; accept those
        # Heuristic: ignore anchors that point back to IGOD or have no scheme
        if href.startswith("http") and "igod.gov.in" not in href.lower():
            districts.append(text)
    # Deduplicate while preserving order
    seen = set()
    ordered = []
    for d in districts:
        if d not in seen:
            seen.add(d)
            ordered.append(d)
    return ordered


def write_python(mapping: Dict[str, List[str]]) -> None:
    TARGET.parent.mkdir(parents=True, exist_ok=True)
    ts = time.strftime("%Y-%m-%d %H:%M:%S")
    # Sort keys and values for stability
    normalized = {k: sorted(v) for k, v in sorted(mapping.items(), key=lambda x: x[0])}
    body = (
        "# Auto-generated by scripts/generate_india_districts.py\n"
        f"# Source: {STATES_INDEX}\n"
        f"# Generated at: {ts} IST\n"
        "# Do not edit manually. Re-run the generator to refresh.\n\n"
        "STATE_DISTRICTS = " + repr(normalized) + "\n"
    )
    TARGET.write_text(body, encoding="utf-8")


def main() -> int:
    print(f"Fetching states from {STATES_INDEX} ...")
    html = fetch(STATES_INDEX)
    states = parse_states(html)
    if not states:
        print("ERROR: failed to parse states from IGOD page.", file=sys.stderr)
        return 1
    print(f"Found {len(states)} states/UTs.")

    mapping: Dict[str, List[str]] = {}
    for name, code in states:
        url = STATE_PAGE_TMPL.format(code=code)
        print(f"  - {name} ({code}) -> {url}")
        try:
            shtml = fetch(url)
            dlist = parse_districts(shtml)
            mapping[name] = dlist
            print(f"    districts: {len(dlist)}")
        except Exception as e:
            print(f"    ERROR: {e}", file=sys.stderr)
            mapping[name] = []

    write_python(mapping)
    print(f"Wrote mapping to {TARGET}")
    return 0


if __name__ == "__main__":
    raise SystemExit(main())
